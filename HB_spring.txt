0.

backend code  representing the Model

Spring DAO

--------------------------------------


Maven, quick start as archetype, give proper group id and artifact id.

JDK

Add proper maven dependency

                    <dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>5.0.5.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.0.5.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>5.2.16.Final</version>
		</dependency>

		
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-dbcp2</artifactId>
			<version>2.2.0</version>
		</dependency>

<dependency>
   <groupId>com.h2database</groupId>
   <artifactId>h2</artifactId>
   <version>1.4.196</version>
   <scope>test</scope>
</dependency>

		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.2.11</version>
		</dependency>



		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.2.11</version>
		</dependency>




		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.2.11</version>
		</dependency>




		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>5.0.5.RELEASE</version>
			<scope>test</scope>
		</dependency>



back end service component testing using unit testing 


--------------------------------------



1.


package com.niit.ItemBackend.config;

import java.util.Properties;
import javax.sql.DataSource;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@EnableTransactionManagement
@ComponentScan(basePackages="com.niit.ItemBackend")
public class AppContext {

	@Bean(name="dataSource")
	public DataSource dataSource() {
		
		DriverManagerDataSource dataSource=new DriverManagerDataSource();
		dataSource.setDriverClassName("org.h2.Driver");
		dataSource.setUrl("jdbc:h2:~/niitdb);
		dataSource.setUsername("sa");
		dataSource.setPassword("password");
		
		return dataSource;
	}
	
	public Properties getHibernateProperties() {
		Properties properties=new Properties();
		properties.setProperty("hibernate.dialect", "org.hibernate.dialect.H2Dialect");
		properties.setProperty("hibernate.show_sql", "true");
		properties.setProperty("hibernate.hbm2ddl.auto", "update");
		
		return properties;
	}
	
	@Bean(name="sessionFactory")
	@Autowired
	public LocalSessionFactoryBean sessionFactory(DataSource dataSource) {
		LocalSessionFactoryBean sessionFactory=new LocalSessionFactoryBean();
		sessionFactory.setDataSource(dataSource);
		sessionFactory.setHibernateProperties(getHibernateProperties());
		sessionFactory.setPackagesToScan("com.niit.ItemBackend.model");
		return sessionFactory;
	}
	
	@Bean(name="transactionManager")
	@Autowired
	public HibernateTransactionManager getTransactionManager(SessionFactory sessionFactory) {
		HibernateTransactionManager transactionManager=new HibernateTransactionManager();
		transactionManager.setSessionFactory(sessionFactory);
		
		return transactionManager;
	}
	

}
------------------------------------

2.

package com.niit.ItemBackend.model;


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.springframework.lang.NonNull;

@Entity
@Table(name="Item")
public class Item {
	
	@Id
	private int itemId;
	private String description;
	private float  price;
	private int  quantity;

	public int getItemId() {
		return itemId;
	}

	public void setItemId(int itemId) {
		this.itemId = itemId;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public float getPrice() {
		return price;
	}

	public void setPrice(float price) {
		this.price = price;
	}

	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}
	
}

--------------------------------

3.

package com.niit.ItemBackend.dao;

import com.niit.ItemBackend.model.*;

public interface ItemDAO {

	public boolean addItem(Item item);

	
}

-----------------------------------
4.

package com.niit.ItemBackend.dao;
import java.util.List;

import javax.transaction.Transactional;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


import com.niit.ItemBackend.model.Item;
import com.niit.ItemBackend.model.*;;

@Repository("itemDAO")
@Transactional
public class ItemImpl implements ItemDAO {

	@Autowired
	private SessionFactory sessionFactory;

	
	public boolean addItem(Item item) {
		// TODO Auto-generated method stub
		//return false;
		sessionFactory.getCurrentSession().save(item);
		return true;

	
	}

}

----------------------------------------------
5.


package com.niit.ItemBackend.service;


import com.niit.ItemBackend.model.Item;

public interface ItemService {

public boolean addItem(Item item);

}

-------------------------------------------
6.

package com.niit.ItemBackend.service;

import java.util.List;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;

import com.niit.ItemBackend.model.Item;
import com.niit.ItemBackend.dao.*;;


@Service
@Repository("itemService")
@Transactional
public class ItemServiceImpl implements ItemService {

	@Autowired
	private ItemDAO itemDAO;
	

	public boolean addItem(Item item) {
		// TODO Auto-generated method stub
	//	return false;
			itemDAO.addItem(item);
			return true;
		}

	
}

---------------------------------------

7.

package com.niit.ItemBackend.test;


import com.niit.ItemBackend.dao.*;
import com.niit.ItemBackend.config.*;
import com.niit.ItemBackend.model.*;
import com.niit.ItemBackend.service.*;




import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import org.springframework.test.context.junit4.SpringRunner;
import static org.junit.Assert.*;

@RunWith(SpringRunner.class)
@SpringJUnitConfig(classes=AppContext.class)
public class ItemTest {

	@Autowired
	private ItemService itemService;
	Item	 item;
	
	
	@Before
	public void setUp() throws Exception {
	item=new Item();
		item.setItemId(30);
	item.setDescription("mngo");
item.setPrice((float)10.9);
		item.setQuantity(10);
	
	}

	@After
	public void tearDown() throws Exception {
	item=null;
	}

	
	@Test //positive test
	public void testUpdateItem() 
	{
	//	fail("Not yet implemented");
		
	assertEquals(true, itemService.addItem(item));
			
	}

	
}
----------------------------------